diff --git a/node_modules/react-native-credit-card-input/src/CCInput.js b/node_modules/react-native-credit-card-input/src/CCInput.js
index dde3aec..a600846 100644
--- a/node_modules/react-native-credit-card-input/src/CCInput.js
+++ b/node_modules/react-native-credit-card-input/src/CCInput.js
@@ -1,17 +1,18 @@
-import React, { Component } from "react";
-import PropTypes from "prop-types";
+import React, {Component} from 'react';
+import PropTypes from 'prop-types';
+import {ViewPropTypes,TextPropTypes} from 'deprecated-react-native-prop-types';
 import {
   View,
   Text,
   TextInput,
   TouchableOpacity,
   StyleSheet,
-  ViewPropTypes,
-} from "react-native";
-
+} from 'react-native';
+import IonIcons from 'react-native-vector-icons/Ionicons'
 const s = StyleSheet.create({
   baseInputStyle: {
-    color: "black",
+    color: 'black',
+    backgroundColor:'#EEEEEE'
   },
 });
 
@@ -23,11 +24,11 @@ export default class CCInput extends Component {
     placeholder: PropTypes.string,
     keyboardType: PropTypes.string,
 
-    status: PropTypes.oneOf(["valid", "invalid", "incomplete"]),
+    status: PropTypes.oneOf(['valid', 'invalid', 'incomplete']),
 
     containerStyle: ViewPropTypes.style,
-    inputStyle: Text.propTypes.style,
-    labelStyle: Text.propTypes.style,
+    inputStyle: TextPropTypes.style,
+    labelStyle: TextPropTypes.style,
     validColor: PropTypes.string,
     invalidColor: PropTypes.string,
     placeholderColor: PropTypes.string,
@@ -40,9 +41,9 @@ export default class CCInput extends Component {
   };
 
   static defaultProps = {
-    label: "",
-    value: "",
-    status: "incomplete",
+    label: '',
+    value: '',
+    status: 'incomplete',
     containerStyle: {},
     inputStyle: {},
     labelStyle: {},
@@ -54,11 +55,11 @@ export default class CCInput extends Component {
   };
 
   componentWillReceiveProps = newProps => {
-    const { status, value, onBecomeEmpty, onBecomeValid, field } = this.props;
-    const { status: newStatus, value: newValue } = newProps;
+    const {status, value, onBecomeEmpty, onBecomeValid, field} = this.props;
+    const {status: newStatus, value: newValue} = newProps;
 
-    if (value !== "" && newValue === "") onBecomeEmpty(field);
-    if (status !== "valid" && newStatus === "valid") onBecomeValid(field);
+    if (value !== '' && newValue === '') onBecomeEmpty(field);
+    if (status !== 'valid' && newStatus === 'valid') onBecomeValid(field);
   };
 
   focus = () => this.refs.input.focus();
@@ -67,16 +68,48 @@ export default class CCInput extends Component {
   _onChange = value => this.props.onChange(this.props.field, value);
 
   render() {
-    const { label, value, placeholder, status, keyboardType,
-            containerStyle, inputStyle, labelStyle,
-            validColor, invalidColor, placeholderColor,
-            additionalInputProps } = this.props;
+    const {
+      label,
+      value,
+      placeholder,
+      status,
+      keyboardType,
+      containerStyle,
+      inputStyle,
+      labelStyle,
+      validColor,
+      invalidColor,
+      placeholderColor,
+      additionalInputProps,
+    } = this.props;
     return (
-      <TouchableOpacity onPress={this.focus}
-        activeOpacity={0.99}>
-        <View style={[containerStyle]}>
-          { !!label && <Text style={[labelStyle]}>{label}</Text>}
-          <TextInput ref="input"
+      <TouchableOpacity onPress={this.focus} activeOpacity={0.99}>
+        <View
+          style={[
+            containerStyle,
+            {
+              backgroundColor: "#EEEEEE",
+              borderBottomWidth: 0,
+              marginVer
+              paddingHorizontal: 10,
+              paddingVeral: 6,
+              borderRadius: 10,
+              shadowColor: '#000',
+              shadowOffset: {
+                width: 0,
+                height: 1,
+              },
+              shadowOpacity: 0.22,
+              shadowRadius: 2.22,
+
+              elevation: 3,
+              flexDirection:'row',
+              justifyContent:'space-between'
+            },
+          ]}>
+          {/* { !!label && <Text style={[labelStyle]}>{label}</Text>} */}
+          <TextInput
+            ref="input"
             {...additionalInputProps}
             keyboardType={keyboardType}
             autoCapitalise="words"
@@ -84,16 +117,27 @@ export default class CCInput extends Component {
             style={[
               s.baseInputStyle,
               inputStyle,
-              ((validColor && status === "valid") ? { color: validColor } :
-              (invalidColor && status === "invalid") ? { color: invalidColor } :
-              {}),
+              validColor && status === 'valid'
+                ? {color: validColor}
+                : invalidColor && status === 'invalid'
+                ? {color: invalidColor}
+                : {},
             ]}
-            underlineColorAndroid={"transparent"}
+            underlineColorAndroid={'transparent'}
             placeholderTextColor={placeholderColor}
             placeholder={placeholder}
             value={value}
             onFocus={this._onFocus}
-            onChangeText={this._onChange} />
+            onChangeText={this._onChange}
+          />
+          {
+            !!label &&
+            label == 'CARD NUMBER' ? 
+            <IonIcons name="card-outline" color={'#fff'} size={25} style={{marginTop:7}} />
+            : label == 'EXPIRY' ? 
+            <IonIcons name="calendar-outline" color={'#fff'} size={25} style={{marginTop:7}} />
+            : null
+          }
         </View>
       </TouchableOpacity>
     );
diff --git a/node_modules/react-native-credit-card-input/src/CreditCardInput.js b/node_modules/react-native-credit-card-input/src/CreditCardInput.js
index 44f43c8..23ff0b7 100644
--- a/node_modules/react-native-credit-card-input/src/CreditCardInput.js
+++ b/node_modules/react-native-credit-card-input/src/CreditCardInput.js
@@ -1,5 +1,6 @@
-import React, { Component } from "react";
-import PropTypes from "prop-types";
+import React, {Component} from 'react';
+import PropTypes from 'prop-types';
+import {ViewPropTypes,TextPropTypes} from 'deprecated-react-native-prop-types';
 import ReactNative, {
   NativeModules,
   View,
@@ -8,16 +9,13 @@ import ReactNative, {
   ScrollView,
   Dimensions,
   TextInput,
-  ViewPropTypes,
-} from "react-native";
-
-import CreditCard from "./CardView";
-import CCInput from "./CCInput";
-import { InjectedProps } from "./connectToState";
-
+} from 'react-native';
+import CreditCard from './CardView';
+import CCInput from './CCInput';
+import {InjectedProps} from './connectToState';
 const s = StyleSheet.create({
   container: {
-    alignItems: "center",
+    alignItems: 'center',
   },
   form: {
     marginTop: 20,
@@ -26,163 +24,212 @@ const s = StyleSheet.create({
     marginLeft: 20,
   },
   inputLabel: {
-    fontWeight: "bold",
+    fontWeight: 'bold',
   },
   input: {
     height: 40,
   },
 });
-
-const CVC_INPUT_WIDTH = 70;
+const CARD_NUMBER_INPUT_WIDTH_OFFSET = 30;
+const CVC_INPUT_WIDTH = Dimensions.get('window').width * 0.412;
 const EXPIRY_INPUT_WIDTH = CVC_INPUT_WIDTH;
-const CARD_NUMBER_INPUT_WIDTH_OFFSET = 40;
-const CARD_NUMBER_INPUT_WIDTH = Dimensions.get("window").width - EXPIRY_INPUT_WIDTH - CARD_NUMBER_INPUT_WIDTH_OFFSET;
-const NAME_INPUT_WIDTH = CARD_NUMBER_INPUT_WIDTH;
 const PREVIOUS_FIELD_OFFSET = 40;
 const POSTAL_CODE_INPUT_WIDTH = 120;
-
 /* eslint react/prop-types: 0 */ // https://github.com/yannickcr/eslint-plugin-react/issues/106
 export default class CreditCardInput extends Component {
   static propTypes = {
     ...InjectedProps,
     labels: PropTypes.object,
     placeholders: PropTypes.object,
-
-    labelStyle: Text.propTypes.style,
-    inputStyle: Text.propTypes.style,
+    labelStyle: TextPropTypes.style,
+    inputStyle: TextPropTypes.style,
     inputContainerStyle: ViewPropTypes.style,
-
     validColor: PropTypes.string,
     invalidColor: PropTypes.string,
     placeholderColor: PropTypes.string,
-
     cardImageFront: PropTypes.number,
     cardImageBack: PropTypes.number,
     cardScale: PropTypes.number,
     cardFontFamily: PropTypes.string,
     cardBrandIcons: PropTypes.object,
-
     allowScroll: PropTypes.bool,
-
-    additionalInputsProps: PropTypes.objectOf(PropTypes.shape(TextInput.propTypes)),
+    additionalInputsProps: PropTypes.objectOf(
+      PropTypes.shape(TextInput.propTypes),
+    ),
   };
-
   static defaultProps = {
     cardViewSize: {},
     labels: {
       name: "CARDHOLDER'S NAME",
-      number: "CARD NUMBER",
-      expiry: "EXPIRY",
-      cvc: "CVC/CCV",
-      postalCode: "POSTAL CODE",
+      number: 'CARD NUMBER',
+      expiry: 'EXPIRY',
+      cvc: 'CVC/CCV',
+      postalCode: 'POSTAL CODE',
     },
     placeholders: {
-      name: "Full Name",
-      number: "1234 5678 1234 5678",
-      expiry: "MM/YY",
-      cvc: "CVC",
-      postalCode: "34567",
+      name: 'Full Name',
+      number: 'Card Number',
+      expiry: 'Expiry Date',
+      cvc: 'CVC',
+      postalCode: '34567',
     },
     inputContainerStyle: {
       borderBottomWidth: 1,
-      borderBottomColor: "black",
+      borderBottomColor: 'black',
     },
-    validColor: "",
-    invalidColor: "red",
-    placeholderColor: "gray",
+    validColor: '',
+    invalidColor: 'red',
+    placeholderColor: 'gray',
     allowScroll: false,
     additionalInputsProps: {},
   };
-
   componentDidMount = () => this._focus(this.props.focused);
-
   componentWillReceiveProps = newProps => {
     if (this.props.focused !== newProps.focused) this._focus(newProps.focused);
   };
-
   _focus = field => {
     if (!field) return;
-
     const scrollResponder = this.refs.Form.getScrollResponder();
     const nodeHandle = ReactNative.findNodeHandle(this.refs[field]);
-
-    NativeModules.UIManager.measureLayoutRelativeToParent(nodeHandle,
-      e => { throw e; },
+    NativeModules.UIManager.measureLayoutRelativeToParent(
+      nodeHandle,
+      e => {
+        throw e;
+      },
       x => {
-        scrollResponder.scrollTo({ x: Math.max(x - PREVIOUS_FIELD_OFFSET, 0), animated: true });
+        scrollResponder.scrollTo({
+          x: Math.max(x - PREVIOUS_FIELD_OFFSET, 0),
+          animated: true,
+        });
         this.refs[field].focus();
-      });
-  }
-
+      },
+    );
+  };
   _inputProps = field => {
     const {
-      inputStyle, labelStyle, validColor, invalidColor, placeholderColor,
-      placeholders, labels, values, status,
-      onFocus, onChange, onBecomeEmpty, onBecomeValid,
+      inputStyle,
+      labelStyle,
+      validColor,
+      invalidColor,
+      placeholderColor,
+      placeholders,
+      labels,
+      values,
+      status,
+      onFocus,
+      onChange,
+      onBecomeEmpty,
+      onBecomeValid,
       additionalInputsProps,
     } = this.props;
-
     return {
       inputStyle: [s.input, inputStyle],
       labelStyle: [s.inputLabel, labelStyle],
-      validColor, invalidColor, placeholderColor,
-      ref: field, field,
-
+      validColor,
+      invalidColor,
+      placeholderColor,
+      ref: field,
+      field,
       label: labels[field],
       placeholder: placeholders[field],
       value: values[field],
       status: status[field],
-
-      onFocus, onChange, onBecomeEmpty, onBecomeValid,
-
+      onFocus,
+      onChange,
+      onBecomeEmpty,
+      onBecomeValid,
       additionalInputProps: additionalInputsProps[field],
     };
   };
-
   render() {
     const {
-      cardImageFront, cardImageBack, inputContainerStyle,
-      values: { number, expiry, cvc, name, type }, focused,
-      allowScroll, requiresName, requiresCVC, requiresPostalCode,
-      cardScale, cardFontFamily, cardBrandIcons,
+      cardImageFront,
+      cardImageBack,
+      inputContainerStyle,
+      values: {number, expiry, cvc, name, type},
+      focused,
+      allowScroll,
+      requiresName,
+      requiresCVC,
+      requiresPostalCode,
+      cardScale,
+      cardFontFamily,
+      cardBrandIcons,
     } = this.props;
-
     return (
       <View style={s.container}>
-        <CreditCard focused={focused}
+        <CreditCard
+          focused={focused}
           brand={type}
           scale={cardScale}
           fontFamily={cardFontFamily}
           imageFront={cardImageFront}
           imageBack={cardImageBack}
           customIcons={cardBrandIcons}
-          name={requiresName ? name : " "}
+          name={requiresName ? name : ' '}
           number={number}
           expiry={expiry}
-          cvc={cvc} />
-        <ScrollView ref="Form"
-          horizontal
+          cvc={cvc}
+        />
+        <ScrollView
+          ref="Form"
+          // horizontal
           keyboardShouldPersistTaps="always"
           scrollEnabled={allowScroll}
           showsHorizontalScrollIndicator={false}
           style={s.form}>
-          <CCInput {...this._inputProps("number")}
-            keyboardType="numeric"
-            containerStyle={[s.inputContainer, inputContainerStyle, { width: CARD_NUMBER_INPUT_WIDTH }]} />
-          <CCInput {...this._inputProps("expiry")}
+          {requiresName && (
+            <CCInput
+              {...this._inputProps('name')}
+              containerStyle={[
+                inputContainerStyle,
+                {width: '100%'},
+              ]}
+            />
+          )}
+          <CCInput
+            {...this._inputProps('number')}
             keyboardType="numeric"
-            containerStyle={[s.inputContainer, inputContainerStyle, { width: EXPIRY_INPUT_WIDTH }]} />
-          { requiresCVC &&
-            <CCInput {...this._inputProps("cvc")}
+            containerStyle={[
+              inputContainerStyle,
+            ]}
+          />
+          <View
+            style={{
+              flexDirection: 'row',
+              width: '100%',
+              alignItems: 'center',
+            }}>
+            <CCInput
+              {...this._inputProps('expiry')}
               keyboardType="numeric"
-              containerStyle={[s.inputContainer, inputContainerStyle, { width: CVC_INPUT_WIDTH }]} /> }
-          { requiresName &&
-            <CCInput {...this._inputProps("name")}
-              containerStyle={[s.inputContainer, inputContainerStyle, { width: NAME_INPUT_WIDTH }]} /> }
-          { requiresPostalCode &&
-            <CCInput {...this._inputProps("postalCode")}
+              containerStyle={[
+                inputContainerStyle,
+                {width: EXPIRY_INPUT_WIDTH},
+              ]}
+            />
+            {requiresCVC && (
+              <CCInput
+                {...this._inputProps('cvc')}
+                keyboardType="numeric"
+                containerStyle={[
+                  inputContainerStyle,
+                  {width: CVC_INPUT_WIDTH, marginLeft: 10},
+                ]}
+              />
+            )}
+          </View>
+          {requiresPostalCode && (
+            <CCInput
+              {...this._inputProps('postalCode')}
               keyboardType="numeric"
-              containerStyle={[s.inputContainer, inputContainerStyle, { width: POSTAL_CODE_INPUT_WIDTH }]} /> }
+              containerStyle={[
+                s.inputContainer,
+                inputContainerStyle,
+                {width: POSTAL_CODE_INPUT_WIDTH},
+              ]}
+            />
+          )}
         </ScrollView>
       </View>
     );
diff --git a/node_modules/react-native-credit-card-input/src/LiteCreditCardInput.js b/node_modules/react-native-credit-card-input/src/LiteCreditCardInput.js
index a5f166b..0346ad2 100644
--- a/node_modules/react-native-credit-card-input/src/LiteCreditCardInput.js
+++ b/node_modules/react-native-credit-card-input/src/LiteCreditCardInput.js
@@ -9,6 +9,7 @@ import {
   TouchableOpacity,
   TextInput,
 } from "react-native";
+import {TextPropTypes} from 'deprecated-react-native-prop-types';
 
 import Icons from "./Icons";
 import CCInput from "./CCInput";
@@ -72,7 +73,7 @@ export default class LiteCreditCardInput extends Component {
 
     placeholders: PropTypes.object,
 
-    inputStyle: Text.propTypes.style,
+    inputStyle: TextPropTypes.style,
 
     validColor: PropTypes.string,
     invalidColor: PropTypes.string,
